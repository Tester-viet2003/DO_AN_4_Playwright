import pytest
from playwright.sync_api import sync_playwright
from pages.login_page import LoginPage
import os
import allure
from datetime import datetime

# ====================================================
# 1Ô∏è‚É£ C·∫•u h√¨nh URL g·ªëc
# ====================================================
@pytest.fixture(scope="session")
def base_url():
    return "https://olm.vn"


# ====================================================
# 2Ô∏è‚É£ Fixture g·ªëc 'page' ‚Äî c·∫ßn cho pytest-bdd nh·∫≠n di·ªán
# ====================================================
@pytest.fixture(scope="function")
def page(base_url):
    """T·∫°o fixture 'page' g·ªëc ƒë·ªÉ pytest-bdd v√† playwright d√πng."""
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False, args=["--window-size=1920,1080"])
        context = browser.new_context(viewport={"width": 1600, "height": 900})
        page = context.new_page()
        page.goto(base_url, timeout=60000)
        yield page
        context.close()
        browser.close()


# ====================================================
# 3Ô∏è‚É£ Fixture m·ªü tr√¨nh duy·ªát (n·∫øu b·∫°n v·∫´n mu·ªën d√πng t√™n 'setup')
# ====================================================
@pytest.fixture(scope="function")
def setup(page):
    """Alias cho 'page' ƒë·ªÉ c√°c test c≈© v·∫´n ho·∫°t ƒë·ªông."""
    yield page


# ====================================================
# 4Ô∏è‚É£ Fixture ƒëƒÉng nh·∫≠p s·∫µn
# ====================================================
@pytest.fixture(scope="function")
def login(setup, base_url):
    """ƒêƒÉng nh·∫≠p s·∫µn v√†o t√†i kho·∫£n OLM."""
    page = setup
    login_page = LoginPage(page, base_url)
    login_page.open()
    login_page.login("12a10_phanthanhviet", 'Vietba"123')
    page.wait_for_load_state("networkidle")
    yield page


# ====================================================
# 5Ô∏è‚É£ Screenshot khi test l·ªói
# ====================================================
def _take_screenshot(page, name_prefix="error"):
    """H√†m ph·ª• ch·ª•p ·∫£nh l·ªói v√† l∆∞u v√†o th∆∞ m·ª•c reports/screenshots"""
    if not page:
        return
    screenshot_dir = os.path.join("reports", "screenshots")
    os.makedirs(screenshot_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    file_path = os.path.join(screenshot_dir, f"{name_prefix}_{timestamp}.png")
    try:
        page.screenshot(path=file_path, full_page=True)
        allure.attach.file(
            file_path,
            name=f"Screenshot - {name_prefix}",
            attachment_type=allure.attachment_type.PNG
        )
        print(f"üì∏ ƒê√£ ch·ª•p ·∫£nh l·ªói: {file_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ch·ª•p ·∫£nh: {e}")


# ====================================================
# 6Ô∏è‚É£ Hook t·ª± ƒë·ªông ch·ª•p ·∫£nh n·∫øu test fail
# ====================================================
def pytest_runtest_makereport(item, call):
    """Hook t·ª± ƒë·ªông ch·∫°y khi test b·ªã l·ªói"""
    if call.when == "call" and call.excinfo is not None:
        page = None
        # T·ª± ƒë·ªông t√¨m bi·∫øn page trong fixture
        for arg in item.funcargs.values():
            if hasattr(arg, "screenshot"):  # N·∫øu l√† Playwright Page object
                page = arg
                break
            # N·∫øu l√† ƒë·ªëi t∆∞·ª£ng ch·ª©a page (nh∆∞ login_page, qna_page,...)
            if hasattr(arg, "page"):
                page = getattr(arg, "page")
                break
        if page:
            _take_screenshot(page, item.name)
